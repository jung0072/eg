"""
Django settings for engage project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import os
from pathlib import Path

from config.config_provider import ConfigProvider
import logging
from django.utils.log import DEFAULT_LOGGING

from config.utils import create_log_files

from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent
config_provider = ConfigProvider()

# Engage logging configuration
log_file_paths = create_log_files(base_directory=BASE_DIR)
LOGGING = DEFAULT_LOGGING

# Create the log message format
LOGGING['formatters']['verbose'] = {
    'format': "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
}

# Create the rotating file handlers for the info level and error
DJANGO_ROTATING_FILE_HANDLER_SETTINGS = {
    'class': 'logging.handlers.RotatingFileHandler',
    'maxBytes': 1024 * 1024 * 10,  # (1024*1024 = 1MB)
    'formatter': 'verbose',
}
LOGGING['handlers']['engage'] = dict(
    level='INFO', filename=log_file_paths['log'], **DJANGO_ROTATING_FILE_HANDLER_SETTINGS
)
LOGGING['handlers']['errors'] = dict(
    level='INFO', filename=log_file_paths['error'], **DJANGO_ROTATING_FILE_HANDLER_SETTINGS
)

# Set the loggers for info and errors
DJANGO_LOG_SETTINGS = {
    'handlers': ['console', 'engage'],
    'level': 'INFO',
    'propagate': True,
}
LOGGING['loggers']['django'] = dict(**DJANGO_LOG_SETTINGS)

DJANGO_ERROR_LOGGER_SETTINGS = {
    'handlers': ['console', 'errors'],
    'level': 'INFO',
    'propagate': False,
}
LOGGING['loggers']['django.channels.server'] = dict(**DJANGO_ERROR_LOGGER_SETTINGS)

# Allow logging from the installed app levels
logging.basicConfig(
    format=LOGGING['formatters']['verbose']['format'], filename='./logs/engage-ic4u.log',
    level=logging.INFO
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'background_task',
    # Third Party Libraries
    'cities_light',
    'channels',
    'django_select2',
    'ckeditor',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'webpack_loader',
    'corsheaders',
    # IC4U Applications
    'base_app.apps.BaseAppConfig',
    'auth_app.apps.AuthAppConfig',
    'engage_app.apps.EngageAppConfig',
    'communication_app.apps.CommunicationAppConfig',
    'email_app.apps.EmailAppConfig',
    'educate_app.apps.EducateAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'auth_app.middlewares.identity.ApiMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.timezone_middleware.TimezoneMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'auth_app', 'templates'),
            os.path.join(BASE_DIR, 'engage_app', 'templates'),
            os.path.join(BASE_DIR, 'communication_app', 'templates'),
            os.path.join(BASE_DIR, 'email_app', 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# To point channels to the root routing configuration
ASGI_APPLICATION = 'config.asgi.application'

redis_connection_string = "{cache_name}://{username}:{password}@{host}:{port}".format(
    cache_name=config_provider.get_config('redis', 'cache_name'),
    username=config_provider.get_config('redis', 'username'),
    password=config_provider.get_config('redis', 'password'),
    host=config_provider.get_config('redis', 'host'),
    port=config_provider.get_config('redis', 'port')
)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [redis_connection_string]
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

LOGIN_URL = '/'

LOGIN_REDIRECT_URL = '/home/'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config_provider.get_config('django', 'secret_key')
SERVER_NAME = config_provider.get_config('environment', 'server_name')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config_provider.get_config('environment', 'debug')
ALLOWED_HOSTS = config_provider.get_config('environment', 'allowed_hosts')

# OTHER PLATFORMS CONFIGS
EDUCATE_SERVER = config_provider.get_config('platform_url', 'educate_url')
INSIGHTSCOPE_SERVER = config_provider.get_config('platform_url', 'insightScope_url')

# Webpack settings for bundle tracking
WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'js/react',
        'STATS_FILE': os.path.join(BASE_DIR, 'static/js/react/webpack-stats.json')
    }
}

# REST FRAMEWORK
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config_provider.get_config('database', 'db_name'),
        'USER': config_provider.get_config('database', 'db_username'),
        'PASSWORD': config_provider.get_config('database', 'db_password'),
        'HOST': config_provider.get_config('database', 'db_host'),
        'PORT': config_provider.get_config('database', 'db_port'),
    }
}

# 2 hours session timeout
SESSION_COOKIE_AGE = 120 * 60
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# SSO Keys are not required anymore as we have segregated both platforms and have their own way of login user
# SSO_PUBLIC_KEY = config_provider.get_config('sso', 'public_key')
# SSO_PRIVATE_KEY = config_provider.get_config('sso', 'private_key')
# SSO_SERVER_URL = config_provider.get_config('sso', 'server')
# SSO_SERVER = f'{SSO_SERVER_URL}/server/'

# Insight Scope Backend API Key
INSIGHTSCOPE_API_KEY = config_provider.get_config('platform_api_keys', 'insightScope_api_key')

# CORS ORIGIN
CORS_ORIGIN_WHITELIST = [f"http://{host}" for host in ALLOWED_HOSTS]
CORS_ORIGIN_ALLOW_ALL = DEBUG
CORS_ALLOW_CREDENTIALS = DEBUG

AWS_S3_BUCKET = config_provider.get_config('aws', 's3_bucket')
AWS_S3_BUCKET_INSIGHTSCOPE = config_provider.get_config('aws', 's3_bucket_is')

LOGOUT_REDIRECT_URL = config_provider.get_config('environment', 'server_name')

# Cities light configuration
CITIES_LIGHT_INDEX_SEARCH_NAMES = False
CITIES_LIGHT_TRANSLATION_LANGUAGES = ['en']

# Script users
SCRIPT_USER_EMAIL_DOMAIN = config_provider.get_config('script_user', 'email_domain')
SCRIPT_USER_FIRST_NAME = 'ANONYMOUS'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar_DefaultToolbar': [
            {'name': 'basicstyles',
             'items': ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'RemoveFormat']},
            {'name': 'paragraph',
             'items': ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-',
                       'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock']},
            {'name': 'links', 'items': ['Link', 'Unlink', 'Anchor']},
            {'name': 'insert', 'items': ['Image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar']},
            '/',
            {'name': 'styles', 'items': ['Styles', 'Format', 'Font', 'FontSize']},
            {'name': 'colors', 'items': ['TextColor', 'BGColor']},
        ],
        'toolbar': 'DefaultToolbar',
        'tabSpaces': 4,
        'extraPlugins': ','.join([
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=45),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

DEFAULT_FROM_EMAIL = config_provider.get_config('email_info', 'default_from_email')
SERVER_EMAIL = config_provider.get_config('email_info', 'server_email')
EMAIL_HOST = config_provider.get_config('email_info', 'email_host')
EMAIL_PORT = config_provider.get_config('email_info', 'email_port')
EMAIL_USE_TLS = config_provider.get_config('email_info', 'email_use_tls')
EMAIL_HOST_USER = config_provider.get_config('email_info', 'email_host_user')
EMAIL_HOST_PASSWORD = config_provider.get_config('email_info', 'email_host_password')
